hi import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Component
public class CustomSequentialGatewayFilter implements GatewayFilter {

    private final WebClient webClient;

    public CustomSequentialGatewayFilter(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.build();
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        // Extract path variable from the request
        String pathVariable = exchange.getRequest().getPath().pathWithinApplication().value().substring("/api/v1/createQuote/".length());

        // Extract headers from the exchange
        String authorizationHeader = exchange.getRequest().getHeaders().getFirst("Authorization");

        // First call to producer API with GET method and path variable
        return webClient.method(HttpMethod.GET)
                .uri("http://producer-api/createQuote/{id}", pathVariable)
                .retrieve()
                .bodyToMono(String.class)
                .flatMap(response1 -> webClient.method(HttpMethod.POST)
                        .uri("http://smart-api/performAction")
                        .header("Authorization", authorizationHeader)  // Use headers from exchange
                        .bodyValue(response1)
                        .retrieve()
                        .bodyToMono(String.class))
                .flatMap(response2 -> {
                    // Modify the exchange request body with the response from the second API call
                    exchange.getAttributes().put("requestBody", response2);

                    // Continue to the next filter in the chain (which will be the route handler)
                    return chain.filter(exchange.mutate()
                            .request(exchange.getRequest().mutate()
                                    .method(HttpMethod.PUT)
                                    .uri(exchange.getRequest().getURI())
                                    .build())
                            .build());
                });
    }
}


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class GatewayConfig {

    @Bean
    public WebClient.Builder webClientBuilder() {
        return WebClient.builder();
    }

    @Bean
    public CustomSequentialGatewayFilter customSequentialGatewayFilter(WebClient.Builder webClientBuilder) {
        return new CustomSequentialGatewayFilter(webClientBuilder);
    }
}

