import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.ServerWebExchangeDecorator;
import reactor.core.publisher.Mono;
import java.net.URI;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.core.io.buffer.DataBufferUtils;
import org.springframework.core.io.buffer.DefaultDataBufferFactory;
import org.springframework.web.server.WebFilterChain;

@Component
public class CustomGatewayFilter implements GatewayFilter {

    private final WebClient webClient;

    public CustomGatewayFilter(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.build();
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        // Extract path variable or other necessary data
        String pathVariable = exchange.getRequest().getPath().pathWithinApplication().value().substring("/api/v1/createQuote/".length());

        // Perform any necessary logic, e.g., fetch data or manipulate headers
        return webClient.method(HttpMethod.GET)
                .uri("http://producer-api/createQuote/{id}", pathVariable)
                .retrieve()
                .bodyToMono(String.class)
                .flatMap(response1 -> webClient.method(HttpMethod.POST)
                        .uri("http://smart-api/performAction")
                        .bodyValue(response1)
                        .retrieve()
                        .bodyToMono(String.class))
                .flatMap(response2 -> {
                    // Create a new request body with the response from the second API call
                    byte[] bytes = response2.getBytes();
                    DataBuffer buffer = new DefaultDataBufferFactory().wrap(bytes);

                    // Create a new ServerHttpRequest with the modified body
                    ServerHttpRequest modifiedRequest = exchange.getRequest().mutate()
                            .method(HttpMethod.PUT)
                            .uri(URI.create("http://producer-api/finalizeQuote"))
                            .header("Content-Type", MediaType.APPLICATION_JSON_VALUE)
                            .build();

                    ServerWebExchange modifiedExchange = new ServerWebExchangeDecorator(exchange) {
                        @Override
                        public ServerHttpRequest getRequest() {
                            return modifiedRequest;
                        }

                        @Override
                        public Mono<DataBuffer> getRequestBody() {
                            return Mono.just(buffer);
                        }
                    };

                    // Continue the filter chain with the modified exchange
                    return chain.filter(modifiedExchange);
                });
    }
}