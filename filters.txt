import org.springframework.cloud.gateway.route.RouteLocator;import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.reactive.function.client.WebClient;import org.springframework.web.server.ServerWebExchange;import reactor.core.publisher.Mono;@Configurationpublic class GatewayConfig { private final WebClient webClient = WebClient.builder().build(); @Bean public RouteLocator customRouteLocator(RouteLocatorBuilder builder) { return builder.routes() // First Route: Redirect base path to another base path .route("base_path_route", r -> r.path("/basepath/**") .filters(f -> f.rewritePath("/basepath/(?<segment>.*)", "/newbasepath/${segment}")) .uri("http://producerapi")) // Second Route: Call producer API, then smart API, then producer API in sequence .route("create_quote_route", r -> r.path("/create-quote/{id}") .filters(f -> f.filter(this::handleCreateQuote)) .uri("http://localhost")) // Dummy URI, actual URIs are set in the filters .build(); } private Mono<Void> handleCreateQuote(ServerWebExchange exchange, org.springframework.cloud.gateway.filter.GatewayFilterChain chain) { String pathVariable = exchange.getRequest().getPath().pathWithinApplication().value().split("/")[2]; return webClient.get() .uri("http://producerapi/create-quote/{id}", pathVariable) .retrieve() .bodyToMono(String.class) .flatMap(producerResponse -> { return webClient.post() .uri("http://smartapi") .bodyValue(producerResponse) .retrieve() .bodyToMono(String.class); }) .flatMap(smartApiResponse -> { // Transform the response to only include the required fields String transformedRequest = transformResponse(smartApiResponse); return webClient.put() .uri("http://producerapi") .bodyValue(transformedRequest) .retrieve() .bodyToMono(String.class); }) .flatMap(finalProducerResponse -> { exchange.getResponse().getHeaders().add("Content-Type", "application/json"); return exchange.getResponse().writeWith(Mono.just(exchange.getResponse() .bufferFactory().wrap(finalProducerResponse.getBytes()))); }); } private String transformResponse(String smartApiResponse) { // Use a JSON library like Jackson for proper transformation // Example using Jackson: // ObjectMapper mapper = new ObjectMapper(); // JsonNode root = mapper.readTree(smartApiResponse); // JsonNode field1 = root.path("field1"); // JsonNode field2 = root.path("field2"); // JsonNode field3 = root.path("field3"); // ObjectNode transformed = mapper.createObjectNode(); // transformed.set("field1", field1); // transformed.set("field2", field2); // transformed.set("field3", field3); // return mapper.writeValueAsString(transformed); // Simple manual transformation example: String field1 = extractField(smartApiResponse, "field1"); String field2 = extractField(smartApiResponse, "field2"); String field3 = extractField(smartApiResponse, "field3"); return String.format("{\"field1\":\"%s\", \"field2\":\"%s\", \"field3\":\"%s\"}", field1, field2, field3); } private String extractField(String json, String fieldName) { // Simple extraction logic for demonstration // In a real scenario, use a JSON library like Jackson or Gson to parse and extract fields int startIndex = json.indexOf("\"" + fieldName + "\":\"") + fieldName.length() + 4; int endIndex = json.indexOf("\"", startIndex); return json.substring(startIndex, endIndex); }}
